import "dotenv/config"
import fs from "fs"
import path from "path"

type Versions = Record<string, string>

const RELATIVE_PATH_TO_ROOT_FOLDER =
  process.env.RELATIVE_PATH_TO_ROOT_FOLDER || ""
const srcFolder = path.join(RELATIVE_PATH_TO_ROOT_FOLDER, "src")
const inputFolder = path.join(srcFolder, "input")
const outputFolder = path.join(srcFolder, "output")

const packageNamePrefix = process.env.PACKAGE_NAME_PREFIX || ""

const lockfiles = ["package-lock.json", "yarn.lock", "pnpm-lock.yaml"]

const main = async () => {
  const files = fs
    .readdirSync(inputFolder)
    .filter((file) => !file.endsWith(".md"))

  for (const file of files) {
    if (!lockfiles.includes(file)) {
      continue
    }

    const content = fs.readFileSync(`${inputFolder}/${file}`, "utf-8")
    const versions: Versions = {}

    switch (file) {
      case "yarn.lock": {
        const packages = content.split("\n\n")

        for (const pkg of packages) {
          const lines = pkg.split("\n")

          // TODO: Ignore "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY."
          // TODO: Ignore "yarn lockfile v1"

          let packageName, packageVersion

          for (const [lineNumber, line] of lines.entries()) {
            if (line.startsWith('"')) {
              packageName = `${packageNamePrefix}${/"(.+?)@/.exec(line)?.[1]}`
            }

            if (line.startsWith("  version")) {
              packageVersion = /version "(.+)"/.exec(line)?.[1]
            }
          }

          if (packageName && packageVersion) {
            versions[packageName] = packageVersion
          }
        }
      }
      default:
        // TODO: package-lock.json, pnpm-lock.yaml
        break
    }

    const jsonVersions = JSON.stringify(versions, null, 2)
    fs.writeFileSync(`${outputFolder}/${file}.json`, jsonVersions)
  }
}

main()
